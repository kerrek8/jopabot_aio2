from loader import dp, bot
from aiogram import types
import json
from aiogram.dispatcher import FSMContext
from states.states import CityGameState
from aiogram.dispatcher.filters import Text

cities = json.load(open('handlers/users/citygame/only_cities.json', encoding='utf-8'))
used_cities = []
last_b = ['a']


@dp.message_handler(commands=['city_game'], state='*')
async def city_game(message: types.Message):
    last_b.append('1')
    await CityGameState.citygamestate.set()
    await bot.send_message(message.chat.id, '–ù–∞–∑–æ–≤–∏—Ç–µ –ª—é–±–æ–π –≥–æ—Ä–æ–¥',
                           reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).row(
                               types.KeyboardButton('–ü–æ–¥—Å–∫–∞–∑–∫–∞')).row(
                               types.KeyboardButton('–û—Ç–º–µ–Ω–∞')))


@dp.message_handler(Text(equals='–ü–æ–¥—Å–∫–∞–∑–∫–∞'), state=CityGameState.citygamestate)
async def help_city_game(message: types.Message, state: FSMContext):
    try:
        for i in cities[last_b[-1]]:
            if i not in used_cities:
                await bot.send_message(message.chat.id, '–ø–æ–ø—Ä–æ–±—É–π: ' + f'<b>{i}</b>', parse_mode='html')
                break
            else:
                await bot.send_message(message.chat.id,
                                       '–ü–æ—Ö–æ–∂–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å...\n' + '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –ø–æ–ª—É—á–∞–µ—Ç—Å—è\n' +
                                       '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–∂–º–∏, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–æ—Ç–º–µ–Ω–∞</b>',
                                       parse_mode='html')
                break
    except:
        await bot.send_message(message.chat.id, '–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–∞–∑–æ–≤–∏ —É–∂ —Å–∞–º')


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞'), state=CityGameState.citygamestate)
async def cancel_city_game(message: types.Message, state: FSMContext):
    used_cities.clear()
    last_b.clear()
    await state.finish()
    await message.reply('ü§°–•–∞—Ö–∞, —è –≤—ã–∏–≥—Ä–∞–ª, –ë–û–¢ –Å–ë–ê–ù–´–ôü§°', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=CityGameState.citygamestate)
async def city_game_handler(message: types.Message, state: FSMContext):
    city = str(message.text).strip().lower()
    f_b = city[0]
    if last_b[-1] not in '—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é':
        last_b.append(f_b)
    a = False
    err = 0
    if f_b not in cities.keys():
        a = False
        err = 2
    elif city not in cities[f_b]:
        a = False
        err = 3
    elif city in used_cities:
        a = False
        err = 4
    elif f_b != last_b[-1]:
        a = False
        err = 5
    else:
        a = True
    if a:
        used_cities.append(city)
        l_b = -1
        while True:
            if city[l_b] not in cities.keys():
                l_b -= 1
            else:
                break
        bot_city = 'n'
        for i in cities[city[l_b]]:
            if i not in used_cities:
                bot_city = i
                used_cities.append(i)
                break
        if len(bot_city) != 1:
            post_for_u = -1
            while True:
                if bot_city[post_for_u] not in cities.keys():
                    post_for_u -= 1
                else:
                    break
            last_b.append(bot_city[post_for_u])
            await bot.send_message(message.chat.id, bot_city + '\n–í–∞–º –Ω–∞ –±—É–∫–≤—É: ' + bot_city[post_for_u])
        else:
            await state.finish()
            used_cities.clear()
            last_b.clear()
            await bot.send_message(message.chat.id, '–¢—ã –≤—ã–∏–≥—Ä–∞–ª')
    else:
        if err == 2:
            await bot.send_message(message.chat.id, '–≥–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ç–∞–∫–æ–π –±—É–∫–≤—ã' + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        elif err == 3:
            await bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç' + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        elif err == 4:
            await bot.send_message(message.chat.id, '—Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª' + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        elif err == 5:
            await bot.send_message(message.chat.id,
                                   '–≥–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞' + '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
